<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_prototype_player_standing</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>phy_fixed_rotation = true;
phy_bullet = true;

// Misc
globalvar player_id;
player_id = id;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Scrub Inputs</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Scrub inputs

// Movement Keys
// Left
if(keyboard_check(binding_left_button_current) == true)
{
  binding_left_button_held = true;
}
else
{
  binding_left_button_held = false;
};

if(keyboard_check_pressed(binding_left_button_current) == true)
{
  binding_left_button_pressed = true;
}
else
{
  binding_left_button_pressed = false;
};

if(keyboard_check_released(binding_left_button_current) == true)
{
  binding_left_button_released = true;
}
else
{
  binding_left_button_released = false;
};

// Right
if(keyboard_check(binding_right_button_current) == true)
{
  binding_right_button_held = true;
}
else
{
  binding_right_button_held = false;
};

if(keyboard_check_pressed(binding_right_button_current) == true)
{
  binding_right_button_pressed = true;
}
else
{
  binding_right_button_pressed = false;
};

if(keyboard_check_released(binding_right_button_current) == true)
{
  binding_right_button_released = true;
}
else
{
  binding_right_button_released = false;
};

// Up
if(keyboard_check(binding_up_button_current) == true)
{
  binding_up_button_held = true;
}
else
{
  binding_up_button_held = false;
};

if(keyboard_check_pressed(binding_up_button_current) == true)
{
  binding_up_button_pressed = true;
}
else
{
  binding_up_button_pressed = false;
};

if(keyboard_check_released(binding_up_button_current) == true)
{
  binding_up_button_released = true;
}
else
{
  binding_up_button_released = false;
};

// Down
if(keyboard_check(binding_down_button_current) == true)
{
  binding_down_button_held = true;
}
else
{
  binding_down_button_held = false;
};

if(keyboard_check_pressed(binding_down_button_current) == true)
{
  binding_down_button_pressed = true;
}
else
{
  binding_down_button_pressed = false;
};

if(keyboard_check_released(binding_down_button_current) == true)
{
  binding_down_button_released = true;
}
else
{
  binding_down_button_released = false;
};

// Action keys
// Jump
if(keyboard_check(binding_jump_button_current) == true)
{
  binding_jump_button_held = true;
}
else
{
  binding_jump_button_held = false;
};

if(keyboard_check_pressed(binding_jump_button_current) == true)
{
  binding_jump_button_pressed = true;
}
else
{
  binding_jump_button_pressed = false;
};

if(keyboard_check_released(binding_jump_button_current) == true)
{
  binding_jump_button_released = true;
}
else
{
  binding_jump_button_released = false;
};

// Use
if(keyboard_check(binding_use_button_current) == true)
{
  binding_use_button_held = true;
}
else
{
  binding_use_button_held = false;
};

if(keyboard_check_pressed(binding_use_button_current) == true)
{
  binding_use_button_pressed = true;
}
else
{
  binding_use_button_pressed = false;
};

if(keyboard_check_released(binding_use_button_current) == true)
{
  binding_use_button_released = true;
}
else
{
  binding_use_button_released = false;
};

// Recall Teleporters
if(keyboard_check(binding_recall_teleporters_button_current) == true)
{
  binding_recall_teleporters_button_held = true;
}
else
{
  binding_recall_teleporters_button_held = false;
};

if(keyboard_check_pressed(binding_recall_teleporters_button_current) == true)
{
  binding_recall_teleporters_button_pressed = true;
}
else
{
  binding_recall_teleporters_button_pressed = false;
};

if(keyboard_check_released(binding_recall_teleporters_button_current) == true)
{
  binding_recall_teleporters_button_released = true;
}
else
{
  binding_recall_teleporters_button_released = false;
};

// Throw Teleporters
if(keyboard_check(binding_throw_teleporter_button_current) == true)
{
  binding_throw_teleporter_button_held = true;
}
else
{
  binding_throw_teleporter_button_held = false;
};

if(keyboard_check_pressed(binding_throw_teleporter_button_current) == true)
{
  binding_throw_teleporter_button_pressed = true;
}
else
{
  binding_throw_teleporter_button_pressed = false;
};

if(keyboard_check_released(binding_throw_teleporter_button_current) == true)
{
  binding_throw_teleporter_button_released = true;
}
else
{
  binding_throw_teleporter_button_released = false;
};

// Use Green Teleporter
if(keyboard_check(binding_use_green_teleporter_button_current) == true)
{
  binding_use_green_teleporter_button_held = true;
}
else
{
  binding_use_green_teleporter_button_held = false;
};

if(keyboard_check_pressed(binding_use_green_teleporter_button_current) == true)
{
  binding_use_green_teleporter_button_pressed = true;
}
else
{
  binding_use_green_teleporter_button_pressed = false;
};

if(keyboard_check_released(binding_use_green_teleporter_button_current) == true)
{
  binding_use_green_teleporter_button_released = true;
}
else
{
  binding_use_green_teleporter_button_released = false;
};

// Use Orange Teleporter
if(keyboard_check(binding_use_orange_teleporter_button_current) == true)
{
  binding_use_orange_teleporter_button_held = true;
}
else
{
  binding_use_orange_teleporter_button_held = false;
};

if(keyboard_check_pressed(binding_use_orange_teleporter_button_current) == true)
{
  binding_use_orange_teleporter_button_pressed = true;
}
else
{
  binding_use_orange_teleporter_button_pressed = false;
};

if(keyboard_check_released(binding_use_orange_teleporter_button_current) == true)
{
  binding_use_orange_teleporter_button_released = true;
}
else
{
  binding_use_orange_teleporter_button_released = false;
};


/*

This is just a blank template for adding more input scrubbers conveniently


// 
if(keyboard_check() == true)
{
   = true;
}
else
{
   = false;
};

if(keyboard_check_pressed() == true)
{
   = true;
}
else
{
   = false;
};

if(keyboard_check_released() == true)
{
   = true;
}
else
{
   = false;
};


*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Move</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Get input / update state information.

if (player_on_top_of_barrier_block == true)
{
  player_on_top_of_something_state = true;
}
else
{
  player_on_top_of_something_state = false;
};

switch (player_action_state)
{

  // Idling
  case ("idle"):
  {

    if (binding_throw_teleporter_button_pressed == true)
    {
      if ((player_inventory_green_teleporter == true) &amp;&amp; (player_inventory_orange_teleporter == false))
      {
        if (green_teleporter_exists == true)
        {
          player_action_state = "throwfail";
        };
        if (green_teleporter_exists == false)
        {
          player_action_state = "throwing teleporter";
          instance_create(phy_com_x, phy_com_y, ob_prototype_green_teleporter_thrown);
        };
      };
      
      if ((player_inventory_green_teleporter == true) &amp;&amp; (player_inventory_orange_teleporter == true))
      {
        if (green_teleporter_exists == true)
        {
          if (orange_teleporter_exists == true)
          {
            player_action_state = "throwfail";
          };
          if (orange_teleporter_exists == false)
          {
            player_action_state = "throwing teleporter";
            instance_create(phy_com_x, phy_com_y, ob_prototype_orange_teleporter_thrown);
          };
        };
        if (green_teleporter_exists == false)
        {
          player_action_state = "throwing teleporter";
          instance_create(phy_com_x, phy_com_y, ob_prototype_green_teleporter_thrown);
        };
      };
    };  
    
    if (binding_recall_teleporters_button_pressed == true)
    {
      player_action_state = "recalling";
      with (ob_prototype_green_teleporter_active)
      {
        instance_destroy();
      };
      with (ob_prototype_orange_teleporter_active)
      {
        instance_destroy();
      };      
    }
    
    if(binding_use_green_teleporter_button_pressed == true)
    {
      player_action_state = "teleporting_green";
      with (ob_prototype_green_teleporter_active)
      {
        other.phy_position_x = phy_position_x;
        other.phy_position_y = phy_position_y - sprite_height;
      };
    };  
    
    if (binding_use_orange_teleporter_button_pressed == true)
    {
      player_action_state = "teleporting_orange";
      with (ob_prototype_orange_teleporter_active)
      {
        other.phy_position_x = phy_position_x;
        other.phy_position_y = phy_position_y - sprite_height;
      };
    };  
  };

  case "throwfail":
  {
    player_action_state = "idle";
  };

  case "throwing teleporter":
  {
    player_action_state = "idle";
  };

  case "teleporting_orange":
  {
    player_action_state = "idle";
  };

  case "teleporting_green":
  {
    player_action_state = "idle";
  };

};

switch (player_movement_state)
{

  // Standing
  case ("standing"):
  {
    sprite_index = sp_prototype_player_standing;

    if ((binding_left_button_held == true) &amp;&amp; (player_on_top_of_something_state == true))
    {
      physics_apply_force(phy_com_x, phy_com_y, -1 * movement_running_force, 0);
      player_movement_state = "running";
      sprite_index = sp_prototype_player_running;
      if (debug_movement == 1) show_debug_message("Started running from standing."); // Debug
    };

    if ((binding_right_button_held == true) &amp;&amp; (player_on_top_of_something_state == true))
    {
      physics_apply_force(phy_com_x, phy_com_y, movement_running_force, 0);
      player_movement_state = "running";
      sprite_index = sp_prototype_player_running;
      if (debug_movement == 1) show_debug_message("Started running from standing."); // Debug
    };

    if ((binding_jump_button_pressed == true) &amp;&amp; (player_on_top_of_something_state == true))
    {
      physics_apply_impulse(phy_com_x, phy_com_y, 0, -1 * movement_jumping_impulse);
      player_movement_state = "jumping";
      sprite_index = sp_prototype_player_jumping;
      player_jump_button_pressed = true;
      player_on_top_of_something_state = false;
      if (debug_movement == 1) show_debug_message("Jump pressed from standing."); // Debug
    };

    if (phy_speed_y &gt; 0)
    {

      player_movement_state = "falling";
      sprite_index = sp_prototype_player_falling;
      player_on_top_of_something_state = false;
      if (debug_movement == 1) show_debug_message("Fell off a ledge from standing."); // Debug
    };
        
  break;
  };

  // Skidding
  case ("skidding"):
  {
    sprite_index = sp_prototype_player_skidding;
    
    if (binding_left_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, -1 * movement_running_force, 0);
      player_movement_state = "running";
      sprite_index = sp_prototype_player_running;
    };

    if (binding_right_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, movement_running_force, 0);
      player_movement_state = "running";
      sprite_index = sp_prototype_player_running;
    };

    if ((binding_right_button_held == false) &amp;&amp; (binding_left_button_held == false))
    {
      physics_apply_local_force(phy_com_x, phy_com_y, barrier_block_walking_friction * -1 * phy_speed_x, 0);
    };
    
    if (binding_jump_button_pressed == true)
    {
      physics_apply_impulse(phy_com_x, phy_com_y, 0, -1 * movement_jumping_impulse);
      player_movement_state = "jumping";
      sprite_index = sp_prototype_player_jumping;
      player_jump_button_pressed = true;
      player_on_top_of_something_state = false;
      if (debug_movement == 1) show_debug_message("Jump pressed from skidding."); // Debug
    };
    
    if ((abs(phy_linear_velocity_x) &lt;= player_movement_sidding_threshold) &amp;&amp; (player_on_top_of_something_state == true))
    {
      player_movement_state = "standing";
      sprite_index = sp_prototype_player_standing;
      if (debug_movement == 1) show_debug_message("Skidded to a stop."); // Debug
    };

    if (phy_speed_y &gt; 0)
    {
      player_movement_state = "falling";
      sprite_index = sp_prototype_player_falling;
      player_on_top_of_something_state = false;
      if (debug_movement == 1) show_debug_message("Fell off a ledge from skidding."); // Debug
    };
    
  break;
  };
      
  // Running
  case ("running"):
  {
    sprite_index = sp_prototype_player_running;
    if ((abs(phy_linear_velocity_x) &lt;= player_movement_sidding_threshold) &amp;&amp; (player_on_top_of_something_state == true))
    {
      player_movement_state = "standing";
      sprite_index = sp_prototype_player_standing;
      if (debug_movement == 1) show_debug_message("Stopping from running."); // Debug
    };
    
    if (binding_left_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, -1 * movement_running_force, 0);
      if(phy_speed_x &gt; 0)
      {
        physics_apply_local_force(phy_com_x, phy_com_y, barrier_block_walking_friction * -1 * phy_speed_x, 0);
      }
    };

    if (binding_right_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, movement_running_force, 0);
      if(phy_speed_x &lt; 0)
      {
        physics_apply_local_force(phy_com_x, phy_com_y, barrier_block_walking_friction * -1 * phy_speed_x, 0);
      }
    };

    if ((binding_right_button_held == false) &amp;&amp; (binding_left_button_held == false) &amp;&amp; (abs(phy_linear_velocity_x) &gt;= player_movement_sidding_threshold))
    {
      player_movement_state = "skidding";
      sprite_index = sp_prototype_player_skidding;
      if (debug_movement == 1) show_debug_message("Started to skid."); // Debug
    };
     
    if (binding_jump_button_pressed == true)
    {
      physics_apply_impulse(phy_com_x, phy_com_y, 0, -1 * movement_jumping_impulse);
      player_movement_state = "jumping";
      sprite_index = sp_prototype_player_jumping;
      player_jump_button_pressed = true;
      player_on_top_of_something_state = false;
      if (debug_movement == 1) show_debug_message("Jump pressed from running."); // Debug
    };

    if (phy_speed_y &gt; 0)
    {
      if (debug_movement == 1) show_debug_message("Fell off a ledge from running."); // Debug
      player_movement_state = "falling";
      sprite_index = sp_prototype_player_falling;
      player_on_top_of_something_state = false;
    };
    
  break;
  };
    
  // Jumping    
  case ("jumping"):
  {
    sprite_index = sp_prototype_player_jumping;
    if (binding_left_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, -1 * movement_running_force, 0);
    };

    if (binding_right_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, movement_running_force, 0);
    };

    if (abs(phy_speed_y) &lt;= player_movement_falling_threshold)
    {
      player_movement_state = "falling";
      sprite_index = sp_prototype_player_falling;
      player_jump_button_pressed = false;
      if (debug_movement == 1) show_debug_message("Started to fall (from top of jump)."); // Debug
    };
    
    if((binding_jump_button_pressed == true) &amp;&amp; (player_jump_button_pressed == true))
    {
      phy_speed_y = 0;
      player_movement_state = "falling";
      sprite_index = sp_prototype_player_falling;
      player_jump_button_pressed = false;
      if (debug_movement == 1) show_debug_message("Started to fall."); // Debug
    };
        
    if ((player_on_top_of_something_state == true) &amp;&amp; (abs(phy_speed_x) &lt;= player_movement_sidding_threshold) &amp;&amp; (player_jump_button_pressed == false))
    {
      player_movement_state = "standing";
      player_jump_button_pressed = false;
      sprite_index = sp_prototype_player_standing;
      if (debug_movement == 1) show_debug_message("Landed from jump before falling and stood. Standing on something? " + string(player_on_top_of_something_state)); // Debug
    };
    
    if ((player_on_top_of_something_state == true) &amp;&amp; (abs(phy_speed_x) &gt; player_movement_sidding_threshold) &amp;&amp; (player_jump_button_pressed == false)) 
    {
      player_movement_state = "skidding";
      player_jump_button_pressed = false;
      sprite_index = sp_prototype_player_skidding;
      if (debug_movement == 1) show_debug_message("Landed from jump before falling and skidded. Standing on something? " + string(player_on_top_of_something_state)); // Debug
    };    
    
  break;
  };   

  // Falling
  case ("falling"):
  {
  
    sprite_index = sp_prototype_player_falling;
   
    if (binding_left_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, -1 * movement_running_force, 0);
    };

    if (binding_right_button_held == true)
    {
      physics_apply_force(phy_com_x, phy_com_y, movement_running_force, 0);
    };

    if (player_on_top_of_something_state == true)
    {
      player_movement_state = "skidding";
      player_jump_button_pressed = false;
      sprite_index = sp_prototype_player_skidding;
      if (debug_movement == 1) show_debug_message("Landed from falling."); // Debug
    };    
    
  break;
  };
};

// Check player facing
  // Left
  
  if (binding_left_button_held == true)
  {
//    image_xscale = -1;
//    sprite_xoffset = -1 * sprite_width;
    player_facing_state = "left";
  };
  
  // Right
  
  if (binding_right_button_held == true)
  {
//    image_xscale = 1;
//    sprite_xoffset = 0;
    player_facing_state = "right";
  }
  

// Cap speeds
phy_speed_x = min(phy_speed_x, phy_speed_x_max);
phy_speed_x = max(phy_speed_x, -1 * phy_speed_x_max);
phy_speed_y = min(phy_speed_y, phy_speed_y_max);
phy_speed_y = max(phy_speed_y, -1 * phy_speed_y_max);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Act</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Act
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_prototype_barrier_block">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>null</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>2</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,1</point>
    <point>30,1</point>
    <point>31,2</point>
    <point>31,62</point>
    <point>30,63</point>
    <point>2,63</point>
    <point>1,62</point>
    <point>1,2</point>
  </PhysicsShapePoints>
</object>
