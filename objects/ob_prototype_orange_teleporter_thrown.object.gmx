<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_prototype_orange_teleporter_thrown</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Set up the fixture for the teleporter

  // Declare the fixture
  fix = physics_fixture_create();
  
  // Set the shape of the fixture
  physics_fixture_set_polygon_shape(fix);
  physics_fixture_add_point(fix, 0, 0);
  physics_fixture_add_point(fix, sprite_width, 0);
  physics_fixture_add_point(fix, sprite_width / 2, sprite_height);
  
  // Set the properties of the fixture
  physics_fixture_set_density(fix, 5);
  physics_fixture_set_collision_group(fix, 0);
  physics_fixture_set_friction(fix, 1);
  physics_fixture_set_linear_damping(fix, 0);
  physics_fixture_set_angular_damping(fix, 0);
  physics_fixture_set_restitution(fix, 0.2);

  // Bind the fixture
  physics_fixture_bind(fix, id);

  // Last details
  phy_bullet = true;

// Apply the initial throwing force of the teleporter
if (player_facing_state == "left")
{
  // Throw to the left
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, -1 * teleporter_throwing_velocity, 0);  
  }

  // Throw to the right
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, teleporter_throwing_velocity, 0);  
  }
  
  // Throw straight up
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, 0, -1 * teleporter_throwing_velocity);  
  }
  
  // Throw straight down (drop) *** This code will need to be repaired to reflect planting instead of dropping.
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) 
    )
  {
    // Just let the teleporter drop.
    // physics_apply_local_impulse(phy_com_x, phy_com_y, 0, -1 * teleporter_throwing_velocity);
  }
  
  // Throw up / left
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  -1 * teleporter_throwing_velocity * (sqrt(2) / 2), -1 * teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw up / right
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  teleporter_throwing_velocity * (sqrt(2) / 2), -1 * teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw down / left
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  -1 * teleporter_throwing_velocity * (sqrt(2) / 2), teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw down / right
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, teleporter_throwing_velocity * (sqrt(2) / 2), teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
}

if (player_facing_state == "right")
{
  // Throw to the right
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, teleporter_throwing_velocity, 0);  
  }

  // Throw to the left
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, -1 * teleporter_throwing_velocity, 0);  
  }
  
  // Throw straight up
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, 0, -1 * teleporter_throwing_velocity);  
  }
  
  // Throw straight down (drop) *** This code will need to be repaired to reflect planting instead of dropping.
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = false) ||
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = true ) 
    )
  {
    // Just let the teleporter drop.
    // physics_apply_local_impulse(phy_com_x, phy_com_y, 0, -1 * teleporter_throwing_velocity);
  }
  
  // Throw up / left
  if(
    (binding_up_button_held = true  &amp;&amp; binding_down_button_held = false &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  -1 * teleporter_throwing_velocity * (sqrt(2) / 2), -1 * teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw up / right
  if(
    (binding_up_button_held = true  &amp;&amp; !binding_down_button_held = false &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  teleporter_throwing_velocity * (sqrt(2) / 2), -1 * teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw down / left
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = true  &amp;&amp; binding_right_button_held = false) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y,  -1 * teleporter_throwing_velocity * (sqrt(2) / 2), teleporter_throwing_velocity * (sqrt(2) / 2));
  }
  
  // Throw down / right
  if(
    (binding_up_button_held = false &amp;&amp; binding_down_button_held = true  &amp;&amp; binding_left_button_held = false &amp;&amp; binding_right_button_held = true ) 
    )
  {
    physics_apply_local_impulse(phy_com_x, phy_com_y, teleporter_throwing_velocity * (sqrt(2) / 2), teleporter_throwing_velocity * (sqrt(2) / 2));
  }
}

// Tell the game that the orange teleporter exists
orange_teleporter_exists = true;

// Non physics-engine based physical properties
collision_x[0] = 0;
collision_x[1] = 0;
collision_y[0] = 0;
collision_y[1] = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>orange_teleporter_exists = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_prototype_barrier_block">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>null</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
instance_create(phy_position_x, phy_position_y, ob_prototype_orange_teleporter_planted);
with (ob_prototype_orange_teleporter_planted)
{
  
};
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="ob_prototype_push_block_big">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>null</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
